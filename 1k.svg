<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="805" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="815.5" ></text>
</g>
<g >
<title>[unknown] (11,250,000 samples, 0.04%)</title><rect x="850.8" y="2005" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="853.76" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1637" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1647.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,250,000 samples, 0.05%)</title><rect x="758.9" y="1973" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="761.85" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="405" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="415.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1669" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;::_M_realloc_insert&lt;trie_node* const&amp;&gt; (3,000,000 samples, 0.01%)</title><rect x="695.5" y="2037" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="698.54" y="2047.5" ></text>
</g>
<g >
<title>clear_page_erms (5,750,000 samples, 0.02%)</title><rect x="527.0" y="1861" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="530.03" y="1871.5" ></text>
</g>
<g >
<title>brk (17,250,000 samples, 0.06%)</title><rect x="759.5" y="2053" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="762.54" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="597" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="607.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="229" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="239.5" ></text>
</g>
<g >
<title>[unknown] (2,750,000 samples, 0.01%)</title><rect x="687.5" y="2021" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="690.52" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="725" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (13,250,000 samples, 0.05%)</title><rect x="17.8" y="1973" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="20.85" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="53" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="63.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1829" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="389" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="399.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="773" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="783.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1413" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (15,535,250,000 samples, 58.13%)</title><rect x="10.8" y="2053" width="686.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.85" y="2063.5" >[unknown]</text>
</g>
<g >
<title>query_packets (600,000,000 samples, 2.25%)</title><rect x="527.4" y="2005" width="26.5" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="530.41" y="2015.5" >q..</text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1813" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1823.5" ></text>
</g>
<g >
<title>operator delete (8,750,000 samples, 0.03%)</title><rect x="578.2" y="2021" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="581.17" y="2031.5" ></text>
</g>
<g >
<title>__libc_start_main (14,992,500,000 samples, 56.10%)</title><rect x="17.8" y="2037" width="662.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="20.83" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1765" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="421" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="431.5" ></text>
</g>
<g >
<title>operator new@plt (2,500,000 samples, 0.01%)</title><rect x="866.6" y="2053" width="0.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="869.61" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (11,250,000 samples, 0.04%)</title><rect x="689.0" y="1989" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="692.02" y="1999.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (168,500,000 samples, 0.63%)</title><rect x="50.9" y="2021" width="7.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="53.87" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="533" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="543.5" ></text>
</g>
<g >
<title>do_page_fault (2,750,000 samples, 0.01%)</title><rect x="1189.6" y="2021" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1192.61" y="2031.5" ></text>
</g>
<g >
<title>put_timespec64 (3,000,000 samples, 0.01%)</title><rect x="685.0" y="1957" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="688.00" y="1967.5" ></text>
</g>
<g >
<title>__do_page_fault (20,250,000 samples, 0.08%)</title><rect x="526.5" y="1973" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="529.51" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="101" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="111.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1157" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (35,750,000 samples, 0.13%)</title><rect x="10.9" y="1989" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator= (15,500,000 samples, 0.06%)</title><rect x="12.8" y="2005" width="0.7" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="15.79" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1093" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1103.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (9,000,000 samples, 0.03%)</title><rect x="1185.9" y="2053" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1188.89" y="2063.5" ></text>
</g>
<g >
<title>do_page_fault (20,250,000 samples, 0.08%)</title><rect x="526.5" y="1989" width="0.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="529.51" y="1999.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (19,000,000 samples, 0.07%)</title><rect x="1182.8" y="2005" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1185.85" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="149" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="159.5" ></text>
</g>
<g >
<title>clear_page_erms (3,500,000 samples, 0.01%)</title><rect x="759.1" y="1893" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="762.10" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="789" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="799.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt;@plt (5,000,000 samples, 0.02%)</title><rect x="1182.6" y="2005" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1185.63" y="2015.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (5,500,000 samples, 0.02%)</title><rect x="1186.3" y="2053" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1189.29" y="2063.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; (623,750,000 samples, 2.33%)</title><rect x="652.1" y="2021" width="27.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="655.11" y="2031.5" >s..</text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="917" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="927.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1573" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="869" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="879.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (6,250,000 samples, 0.02%)</title><rect x="650.6" y="2021" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="653.60" y="2031.5" ></text>
</g>
<g >
<title>__strcmp_sse2_unaligned (14,250,000 samples, 0.05%)</title><rect x="680.0" y="2037" width="0.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="683.01" y="2047.5" ></text>
</g>
<g >
<title>free@plt (8,500,000 samples, 0.03%)</title><rect x="864.0" y="2053" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="867.00" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1349" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1359.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;, std::allocator&lt;std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt; &gt;,  (2,750,000 samples, 0.01%)</title><rect x="687.5" y="2037" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="690.52" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="613" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="623.5" ></text>
</g>
<g >
<title>unmap_region (5,250,000 samples, 0.02%)</title><rect x="759.8" y="1973" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="762.81" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (42,000,000 samples, 0.16%)</title><rect x="691.1" y="2021" width="1.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="694.09" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="501" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="511.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1957" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1967.5" ></text>
</g>
<g >
<title>__do_page_fault (4,250,000 samples, 0.02%)</title><rect x="854.9" y="1973" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="857.93" y="1983.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (41,000,000 samples, 0.15%)</title><rect x="1178.7" y="2005" width="1.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1181.72" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="245" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="255.5" ></text>
</g>
<g >
<title>do_page_fault (2,500,000 samples, 0.01%)</title><rect x="695.6" y="2005" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="698.56" y="2015.5" ></text>
</g>
<g >
<title>process_cpu_clock_get (16,000,000 samples, 0.06%)</title><rect x="684.3" y="1957" width="0.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="687.29" y="1967.5" ></text>
</g>
<g >
<title>free@plt (6,750,000 samples, 0.03%)</title><rect x="1170.8" y="2005" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1173.77" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (97,000,000 samples, 0.36%)</title><rect x="10.8" y="2037" width="4.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.85" y="2047.5" ></text>
</g>
<g >
<title>operator new (22,000,000 samples, 0.08%)</title><rect x="865.6" y="2053" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="868.64" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="117" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="127.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1557" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="581" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="591.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (2,500,000 samples, 0.01%)</title><rect x="685.0" y="1941" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="688.02" y="1951.5" ></text>
</g>
<g >
<title>do_exit (4,250,000 samples, 0.02%)</title><rect x="863.8" y="1989" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="866.81" y="1999.5" ></text>
</g>
<g >
<title>operator new (16,500,000 samples, 0.06%)</title><rect x="1171.7" y="2005" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.72" y="2015.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (7,000,000 samples, 0.03%)</title><rect x="854.8" y="2021" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="857.81" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="293" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="303.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (13,250,000 samples, 0.05%)</title><rect x="17.8" y="1989" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="20.85" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="133" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="143.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1877" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (35,000,000 samples, 0.13%)</title><rect x="10.9" y="1973" width="1.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1983.5" ></text>
</g>
<g >
<title>__do_page_fault (2,750,000 samples, 0.01%)</title><rect x="1189.6" y="2005" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1192.61" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1797" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;trie_node*, trie_node*, std::allocator&lt;trie_node*&gt;, std::__detail::_Identity, std::equal_to&lt;trie_node*&gt;, std::hash&lt;trie_node*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;trie_node* const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;trie_node*, false&gt; &gt; &gt; &gt; (718,750,000 samples, 2.69%)</title><rect x="618.4" y="2021" width="31.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="621.37" y="2031.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,000,000 samples, 0.01%)</title><rect x="1156.2" y="2053" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1159.19" y="2063.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::_M_initialize_map (4,250,000 samples, 0.02%)</title><rect x="12.2" y="1957" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="15.22" y="1967.5" ></text>
</g>
<g >
<title>task_sched_runtime (2,500,000 samples, 0.01%)</title><rect x="18.3" y="1861" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="21.30" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator= (3,500,000 samples, 0.01%)</title><rect x="559.4" y="1973" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="562.40" y="1983.5" ></text>
</g>
<g >
<title>write_acc (5,750,000 samples, 0.02%)</title><rect x="1189.7" y="2053" width="0.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1192.75" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="549" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="559.5" ></text>
</g>
<g >
<title>alloc_pages_vma (7,750,000 samples, 0.03%)</title><rect x="526.9" y="1925" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="529.94" y="1935.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (7,750,000 samples, 0.03%)</title><rect x="526.9" y="1909" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="529.94" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (26,500,000 samples, 0.10%)</title><rect x="10.9" y="1269" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1205" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1215.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::~collate (27,250,000 samples, 0.10%)</title><rect x="689.0" y="2037" width="1.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="692.02" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (109,000,000 samples, 0.41%)</title><rect x="612.4" y="2021" width="4.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="615.38" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="213" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="223.5" ></text>
</g>
<g >
<title>__GI_____strtol_l_internal (7,250,000 samples, 0.03%)</title><rect x="696.8" y="2053" width="0.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="699.77" y="2063.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (47,750,000 samples, 0.18%)</title><rect x="1186.5" y="2053" width="2.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1189.53" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1125" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (27,250,000 samples, 0.10%)</title><rect x="689.0" y="2021" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="692.02" y="2031.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (100,750,000 samples, 0.38%)</title><rect x="680.7" y="2021" width="4.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="683.72" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1013" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1909" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1919.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;trie_node**, std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;dynamic_adjust2 (194,500,000 samples, 0.73%)</title><rect x="855.1" y="2021" width="8.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="858.13" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="837" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (6,000,000 samples, 0.02%)</title><rect x="11.7" y="37" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="14.74" y="47.5" ></text>
</g>
<g >
<title>read_data_set (143,250,000 samples, 0.54%)</title><rect x="553.9" y="2005" width="6.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="556.90" y="2015.5" ></text>
</g>
<g >
<title>cpu_clock_sample_group (14,250,000 samples, 0.05%)</title><rect x="684.4" y="1925" width="0.6" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="687.37" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1733" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1743.5" ></text>
</g>
<g >
<title>do_page_fault (24,750,000 samples, 0.09%)</title><rect x="758.4" y="2021" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="761.45" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1541" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1551.5" ></text>
</g>
<g >
<title>split (112,250,000 samples, 0.42%)</title><rect x="554.6" y="1989" width="5.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="557.60" y="1999.5" ></text>
</g>
<g >
<title>strcmp@plt (24,000,000 samples, 0.09%)</title><rect x="695.7" y="2037" width="1.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="698.67" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (37,500,000 samples, 0.14%)</title><rect x="1181.0" y="2005" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1183.97" y="2015.5" ></text>
</g>
<g >
<title>process_cpu_clock_get (3,750,000 samples, 0.01%)</title><rect x="18.2" y="1925" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="21.25" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1477" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1487.5" ></text>
</g>
<g >
<title>page_fault (24,750,000 samples, 0.09%)</title><rect x="758.4" y="2037" width="1.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="761.45" y="2047.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (10,500,000 samples, 0.04%)</title><rect x="10.4" y="2053" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="13.39" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="85" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="95.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (16,000,000 samples, 0.06%)</title><rect x="689.5" y="2005" width="0.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="692.51" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="741" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="751.5" ></text>
</g>
<g >
<title>task_sched_runtime (12,500,000 samples, 0.05%)</title><rect x="684.4" y="1893" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="687.45" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1333" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="181" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="191.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (5,000,000 samples, 0.02%)</title><rect x="679.8" y="2037" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="682.78" y="2047.5" ></text>
</g>
<g >
<title>operator new (304,000,000 samples, 1.14%)</title><rect x="588.5" y="2021" width="13.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="591.55" y="2031.5" ></text>
</g>
<g >
<title>thread_group_cputime (14,000,000 samples, 0.05%)</title><rect x="684.4" y="1909" width="0.6" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="687.38" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="693" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="703.5" ></text>
</g>
<g >
<title>__libc_malloc (11,750,000 samples, 0.04%)</title><rect x="1168.0" y="2005" width="0.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1171.05" y="2015.5" ></text>
</g>
<g >
<title>__x64_sys_brk (15,250,000 samples, 0.06%)</title><rect x="759.6" y="2005" width="0.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="762.60" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="325" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="335.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="277" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="287.5" ></text>
</g>
<g >
<title>malloc@plt (5,000,000 samples, 0.02%)</title><rect x="865.1" y="2053" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="868.14" y="2063.5" ></text>
</g>
<g >
<title>__dynamic_cast (182,250,000 samples, 0.68%)</title><rect x="700.2" y="2053" width="8.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="703.24" y="2063.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (6,250,000 samples, 0.02%)</title><rect x="18.2" y="1941" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="21.16" y="1951.5" ></text>
</g>
<g >
<title>main_22 (26,725,750,000 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >main_22</text>
</g>
<g >
<title>memmove@plt (106,500,000 samples, 0.40%)</title><rect x="573.5" y="2021" width="4.7" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="576.47" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,500,000 samples, 0.04%)</title><rect x="558.9" y="1925" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="561.88" y="1935.5" ></text>
</g>
<g >
<title>thread_group_cputime (2,500,000 samples, 0.01%)</title><rect x="18.3" y="1877" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="21.30" y="1887.5" ></text>
</g>
<g >
<title>malloc_consolidate (42,250,000 samples, 0.16%)</title><rect x="685.2" y="2037" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="688.19" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1061" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1071.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (55,500,000 samples, 0.21%)</title><rect x="697.8" y="2053" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="700.79" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,750,000 samples, 0.13%)</title><rect x="557.9" y="1941" width="1.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="560.88" y="1951.5" ></text>
</g>
<g >
<title>sysmalloc (3,000,000 samples, 0.01%)</title><rect x="1189.6" y="2053" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1192.60" y="2063.5" ></text>
</g>
<g >
<title>operator delete (2,500,000 samples, 0.01%)</title><rect x="865.4" y="2053" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="868.36" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1717" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1727.5" ></text>
</g>
<g >
<title>unmap_page_range (4,000,000 samples, 0.01%)</title><rect x="863.8" y="1909" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="866.83" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1445" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1455.5" ></text>
</g>
<g >
<title>all (26,725,750,000 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>page_fault (2,750,000 samples, 0.01%)</title><rect x="1189.6" y="2037" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1192.61" y="2047.5" ></text>
</g>
<g >
<title>__libc_malloc (1,024,500,000 samples, 3.83%)</title><rect x="708.5" y="2053" width="45.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="711.52" y="2063.5" >__li..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (707,500,000 samples, 2.65%)</title><rect x="58.3" y="2021" width="31.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="61.32" y="2031.5" >cf..</text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="453" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (7,500,000 samples, 0.03%)</title><rect x="12.5" y="2005" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="15.45" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="677" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="687.5" ></text>
</g>
<g >
<title>handle_mm_fault (16,000,000 samples, 0.06%)</title><rect x="758.8" y="1989" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="761.81" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1653" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (18,750,000 samples, 0.07%)</title><rect x="690.3" y="2021" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="693.26" y="2031.5" ></text>
</g>
<g >
<title>cpu_clock_sample_group (3,250,000 samples, 0.01%)</title><rect x="18.3" y="1893" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="21.27" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1685" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1845" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1855.5" ></text>
</g>
<g >
<title>__split_vma (3,500,000 samples, 0.01%)</title><rect x="759.6" y="1973" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="762.63" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="341" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="351.5" ></text>
</g>
<g >
<title>operator new (3,000,000 samples, 0.01%)</title><rect x="687.1" y="2037" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="690.05" y="2047.5" ></text>
</g>
<g >
<title>operator new@plt (221,250,000 samples, 0.83%)</title><rect x="602.0" y="2021" width="9.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="604.97" y="2031.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; (16,000,000 samples, 0.06%)</title><rect x="694.5" y="2037" width="0.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="697.50" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (12,000,000 samples, 0.04%)</title><rect x="1173.0" y="2005" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1175.96" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform@plt (6,250,000 samples, 0.02%)</title><rect x="1144.7" y="2053" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1147.68" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (6,250,000 samples, 0.02%)</title><rect x="1172.7" y="2005" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1175.68" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (4,750,000 samples, 0.02%)</title><rect x="687.6" y="2037" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="690.64" y="2047.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::~_Deque_base (3,000,000 samples, 0.01%)</title><rect x="866.8" y="2053" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="869.82" y="2063.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (3,750,000 samples, 0.01%)</title><rect x="557.7" y="1941" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="560.72" y="1951.5" ></text>
</g>
<g >
<title>insert_path (16,750,000 samples, 0.06%)</title><rect x="864.4" y="2053" width="0.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="867.39" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1429" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1189" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1199.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6,750,000 samples, 0.03%)</title><rect x="527.0" y="1893" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="529.99" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="821" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="831.5" ></text>
</g>
<g >
<title>std::locale::locale (3,250,000 samples, 0.01%)</title><rect x="559.8" y="1989" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="562.82" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1701" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1711.5" ></text>
</g>
<g >
<title>mmput (4,250,000 samples, 0.02%)</title><rect x="863.8" y="1973" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="866.81" y="1983.5" ></text>
</g>
<g >
<title>do_page_fault (3,250,000 samples, 0.01%)</title><rect x="679.9" y="2005" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="682.85" y="2015.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,750,000 samples, 0.01%)</title><rect x="554.2" y="1989" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="557.21" y="1999.5" ></text>
</g>
<g >
<title>do_syscall_64 (16,500,000 samples, 0.06%)</title><rect x="759.6" y="2021" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="762.57" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (26,750,000 samples, 0.10%)</title><rect x="617.2" y="2021" width="1.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="620.19" y="2031.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::_M_destroy_data_aux (5,000,000 samples, 0.02%)</title><rect x="650.9" y="2021" width="0.2" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="653.88" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;trie_node*, trie_node*, std::allocator&lt;trie_node*&gt;, std::__detail::_Identity, std::equal_to&lt;trie_node*&gt;, std::hash&lt;trie_node*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;trie_node* const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;trie_node*, false&gt; &gt; &gt; &gt; (6,222,750,000 samples, 23.28%)</title><rect x="867.0" y="2053" width="274.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="869.96" y="2063.5" >std::_Hashtable&lt;trie_node*, trie_nod..</text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1925" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="997" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1007.5" ></text>
</g>
<g >
<title>[unknown] (11,250,000 samples, 0.04%)</title><rect x="689.0" y="2005" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="692.02" y="2015.5" ></text>
</g>
<g >
<title>do_syscall_64 (57,250,000 samples, 0.21%)</title><rect x="682.6" y="1989" width="2.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="685.64" y="1999.5" ></text>
</g>
<g >
<title>operator delete@plt (6,750,000 samples, 0.03%)</title><rect x="1171.4" y="2005" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1174.42" y="2015.5" ></text>
</g>
<g >
<title>malloc@plt (204,250,000 samples, 0.76%)</title><rect x="564.5" y="2021" width="9.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="567.45" y="2031.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (20,500,000 samples, 0.08%)</title><rect x="684.2" y="1973" width="0.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="687.23" y="1983.5" ></text>
</g>
<g >
<title>operator delete@plt (3,750,000 samples, 0.01%)</title><rect x="865.5" y="2053" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="868.47" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1461" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1471.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (6,500,000 samples, 0.02%)</title><rect x="759.0" y="1941" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="761.98" y="1951.5" ></text>
</g>
<g >
<title>__strlen_avx2 (42,750,000 samples, 0.16%)</title><rect x="1149.1" y="2037" width="1.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1152.08" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1509" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="357" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; (11,250,000 samples, 0.04%)</title><rect x="850.8" y="1989" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="853.76" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="469" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (19,500,000 samples, 0.07%)</title><rect x="1184.7" y="2053" width="0.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1187.67" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1397" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1407.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1109" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="885" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="895.5" ></text>
</g>
<g >
<title>posix_cpu_clock_get (3,750,000 samples, 0.01%)</title><rect x="18.2" y="1909" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="21.25" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="309" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="319.5" ></text>
</g>
<g >
<title>[unknown] (91,750,000 samples, 0.34%)</title><rect x="850.8" y="2021" width="4.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="853.76" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,500,000 samples, 0.02%)</title><rect x="559.1" y="1909" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="562.14" y="1919.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::~_Deque_base (3,250,000 samples, 0.01%)</title><rect x="612.2" y="2021" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="615.20" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="373" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="383.5" ></text>
</g>
<g >
<title>[unknown] (294,250,000 samples, 1.10%)</title><rect x="850.8" y="2037" width="12.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="853.76" y="2047.5" ></text>
</g>
<g >
<title>write_node (58,000,000 samples, 0.22%)</title><rect x="561.9" y="2005" width="2.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="564.89" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1381" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (638,250,000 samples, 2.39%)</title><rect x="1156.4" y="2037" width="28.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1159.40" y="2047.5" >[..</text>
</g>
<g >
<title>__do_page_fault (3,250,000 samples, 0.01%)</title><rect x="679.9" y="1989" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="682.85" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (77,000,000 samples, 0.29%)</title><rect x="1173.5" y="2005" width="3.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1176.49" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::isctype (20,750,000 samples, 0.08%)</title><rect x="1153.4" y="2053" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1156.40" y="2063.5" ></text>
</g>
<g >
<title>do_syscall_64 (13,250,000 samples, 0.05%)</title><rect x="17.8" y="1957" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="20.85" y="1967.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (54,250,000 samples, 0.20%)</title><rect x="15.1" y="2037" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="18.14" y="2047.5" ></text>
</g>
<g >
<title>__strlen_avx2 (42,000,000 samples, 0.16%)</title><rect x="753.9" y="2053" width="1.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="756.93" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="965" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="975.5" ></text>
</g>
<g >
<title>write_acc (11,500,000 samples, 0.04%)</title><rect x="561.4" y="2005" width="0.5" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="564.38" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;@plt (5,500,000 samples, 0.02%)</title><rect x="687.8" y="2037" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="690.85" y="2047.5" ></text>
</g>
<g >
<title>operator new (10,500,000 samples, 0.04%)</title><rect x="852.5" y="2005" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="855.46" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1525" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1535.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (3,500,000 samples, 0.01%)</title><rect x="10.9" y="37" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.87" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (10,750,000 samples, 0.04%)</title><rect x="650.1" y="2021" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="653.11" y="2031.5" ></text>
</g>
<g >
<title>operator delete@plt (226,250,000 samples, 0.85%)</title><rect x="578.6" y="2021" width="9.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="581.56" y="2031.5" ></text>
</g>
<g >
<title>clock_gettime (100,750,000 samples, 0.38%)</title><rect x="680.7" y="2037" width="4.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="683.72" y="2047.5" ></text>
</g>
<g >
<title>slot_index (9,500,000 samples, 0.04%)</title><rect x="611.7" y="2021" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="614.74" y="2031.5" ></text>
</g>
<g >
<title>operator new@plt (4,750,000 samples, 0.02%)</title><rect x="852.9" y="2005" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="855.92" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="517" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="527.5" ></text>
</g>
<g >
<title>strxfrm_l (53,750,000 samples, 0.20%)</title><rect x="1151.0" y="2037" width="2.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1153.97" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3,500,000 samples, 0.01%)</title><rect x="1156.2" y="2037" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1159.21" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="901" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="911.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (15,000,000 samples, 0.06%)</title><rect x="1183.9" y="2021" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1186.92" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1589" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1599.5" ></text>
</g>
<g >
<title>do_brk_flags (4,000,000 samples, 0.01%)</title><rect x="760.0" y="1989" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="763.05" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (21,000,000 samples, 0.08%)</title><rect x="688.1" y="2037" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="691.09" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="981" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="991.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::_M_initialize_map (3,250,000 samples, 0.01%)</title><rect x="687.3" y="2037" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="690.26" y="2047.5" ></text>
</g>
<g >
<title>memcpy@plt (3,250,000 samples, 0.01%)</title><rect x="1171.3" y="2005" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1174.28" y="2015.5" ></text>
</g>
<g >
<title>__libc_malloc (3,500,000 samples, 0.01%)</title><rect x="17.7" y="2037" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="20.67" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (12,000,000 samples, 0.04%)</title><rect x="1167.5" y="2005" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1170.52" y="2015.5" ></text>
</g>
<g >
<title>do_page_fault (4,250,000 samples, 0.02%)</title><rect x="854.9" y="1989" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="857.93" y="1999.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (4,250,000 samples, 0.02%)</title><rect x="863.8" y="2021" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="866.81" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="949" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="959.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (5,000,000 samples, 0.02%)</title><rect x="852.0" y="2005" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="854.99" y="2015.5" ></text>
</g>
<g >
<title>page_fault (2,500,000 samples, 0.01%)</title><rect x="695.6" y="2021" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="698.56" y="2031.5" ></text>
</g>
<g >
<title>page_fault (20,250,000 samples, 0.08%)</title><rect x="526.5" y="2005" width="0.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="529.51" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1221" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1231.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (11,250,000 samples, 0.04%)</title><rect x="1168.6" y="2005" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1171.56" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (13,750,000 samples, 0.05%)</title><rect x="17.8" y="2021" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.83" y="2031.5" ></text>
</g>
<g >
<title>@plt (15,750,000 samples, 0.06%)</title><rect x="1146.7" y="2037" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1149.65" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (27,500,000 samples, 0.10%)</title><rect x="693.2" y="2037" width="1.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="696.16" y="2047.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (38,750,000 samples, 0.14%)</title><rect x="1169.1" y="2005" width="1.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1172.06" y="2015.5" ></text>
</g>
<g >
<title>prep_new_page (5,750,000 samples, 0.02%)</title><rect x="527.0" y="1877" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="530.03" y="1887.5" ></text>
</g>
<g >
<title>unmap_single_vma (4,000,000 samples, 0.01%)</title><rect x="863.8" y="1925" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="866.83" y="1935.5" ></text>
</g>
<g >
<title>clock_gettime (13,500,000 samples, 0.05%)</title><rect x="17.8" y="2005" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="20.84" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="661" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator= (4,500,000 samples, 0.02%)</title><rect x="695.3" y="2037" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="698.30" y="2047.5" ></text>
</g>
<g >
<title>write_acc (2,500,000 samples, 0.01%)</title><rect x="679.7" y="2021" width="0.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="682.66" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="165" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="175.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1493" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1749" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (26,500,000 samples, 0.10%)</title><rect x="10.9" y="1285" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1295.5" ></text>
</g>
<g >
<title>page_fault (4,250,000 samples, 0.02%)</title><rect x="854.9" y="2005" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="857.93" y="2015.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6,000,000 samples, 0.02%)</title><rect x="759.0" y="1925" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="762.00" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (617,000,000 samples, 2.31%)</title><rect x="1156.7" y="2021" width="27.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1159.68" y="2031.5" >s..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,048,750,000 samples, 7.67%)</title><rect x="760.3" y="2053" width="90.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="763.30" y="2063.5" >cfree@GLIB..</text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1605" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1615.5" ></text>
</g>
<g >
<title>__do_page_fault (2,500,000 samples, 0.01%)</title><rect x="695.6" y="1989" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="698.56" y="1999.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3,250,000 samples, 0.01%)</title><rect x="759.3" y="1957" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="762.33" y="1967.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,500,000 samples, 0.06%)</title><rect x="759.6" y="2037" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="762.57" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="629" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (15,000,000 samples, 0.06%)</title><rect x="11.1" y="37" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="14.07" y="47.5" ></text>
</g>
<g >
<title>std::binary_search&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (7,500,000 samples, 0.03%)</title><rect x="1185.5" y="2053" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1188.54" y="2063.5" ></text>
</g>
<g >
<title>__lock_text_start (11,250,000 samples, 0.04%)</title><rect x="684.5" y="1877" width="0.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="687.46" y="1887.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (5,250,000 samples, 0.02%)</title><rect x="1183.7" y="2005" width="0.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1186.69" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1781" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1791.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (58,500,000 samples, 0.22%)</title><rect x="682.6" y="2005" width="2.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="685.58" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (222,750,000 samples, 0.83%)</title><rect x="1157.7" y="2005" width="9.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1160.68" y="2015.5" ></text>
</g>
<g >
<title>unmap_vmas (4,000,000 samples, 0.01%)</title><rect x="863.8" y="1941" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="866.83" y="1951.5" ></text>
</g>
<g >
<title>__libc_malloc (16,750,000 samples, 0.06%)</title><rect x="851.3" y="2005" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="854.25" y="2015.5" ></text>
</g>
<g >
<title>operator new@plt (5,250,000 samples, 0.02%)</title><rect x="1172.4" y="2005" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1175.45" y="2015.5" ></text>
</g>
<g >
<title>_int_malloc (80,000,000 samples, 0.30%)</title><rect x="756.0" y="2053" width="3.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="759.01" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1317" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1327.5" ></text>
</g>
<g >
<title>__strxfrm_l@plt (4,750,000 samples, 0.02%)</title><rect x="755.8" y="2053" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="758.79" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (25,000,000 samples, 0.09%)</title><rect x="13.7" y="2021" width="1.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="16.71" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="485" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="495.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1861" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1871.5" ></text>
</g>
<g >
<title>malloc@plt (4,750,000 samples, 0.02%)</title><rect x="1171.1" y="2005" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1174.07" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="437" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="447.5" ></text>
</g>
<g >
<title>__do_page_fault (24,500,000 samples, 0.09%)</title><rect x="758.4" y="2005" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="761.45" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (41,750,000 samples, 0.16%)</title><rect x="1154.3" y="2053" width="1.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1157.31" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (11,250,000 samples, 0.04%)</title><rect x="689.0" y="1973" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="692.02" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (26,500,000 samples, 0.10%)</title><rect x="10.9" y="1253" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1263.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt;@plt (13,250,000 samples, 0.05%)</title><rect x="1188.6" y="2053" width="0.6" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1191.64" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (59,000,000 samples, 0.22%)</title><rect x="10.9" y="2021" width="2.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="709" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::emplace_back&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; (38,000,000 samples, 0.14%)</title><rect x="853.1" y="2005" width="1.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="856.13" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="645" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="655.5" ></text>
</g>
<g >
<title>do_group_exit (4,250,000 samples, 0.02%)</title><rect x="863.8" y="2005" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="866.81" y="2015.5" ></text>
</g>
<g >
<title>strlen@plt (5,750,000 samples, 0.02%)</title><rect x="1189.3" y="2053" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1192.30" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (57,750,000 samples, 0.22%)</title><rect x="1141.7" y="2053" width="2.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1144.71" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1941" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (190,000,000 samples, 0.71%)</title><rect x="1145.0" y="2053" width="8.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1147.95" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="853" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="863.5" ></text>
</g>
<g >
<title>handle_mm_fault (13,500,000 samples, 0.05%)</title><rect x="526.8" y="1957" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="529.80" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="565" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="575.5" ></text>
</g>
<g >
<title>malloc@plt (5,000,000 samples, 0.02%)</title><rect x="852.2" y="2005" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="855.21" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="261" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (65,750,000 samples, 0.25%)</title><rect x="690.3" y="2037" width="2.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="693.25" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (6,750,000 samples, 0.03%)</title><rect x="1144.3" y="2053" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1147.26" y="2063.5" ></text>
</g>
<g >
<title>__handle_mm_fault (12,750,000 samples, 0.05%)</title><rect x="526.8" y="1941" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="529.83" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (5,500,000 samples, 0.02%)</title><rect x="1156.4" y="2021" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1159.43" y="2031.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,250,000 samples, 0.02%)</title><rect x="863.8" y="2037" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="866.81" y="2047.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt;, std::allocator&lt;std::vector&lt;trie_node*, std::allocator&lt;trie_node*&gt; &gt; &gt; &gt;::_M_pop_front_aux (22,750,000 samples, 0.09%)</title><rect x="651.1" y="2021" width="1.0" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="654.10" y="2031.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6,500,000 samples, 0.02%)</title><rect x="759.0" y="1957" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="761.98" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1173" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1365" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1375.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (16,000,000 samples, 0.06%)</title><rect x="697.1" y="2053" width="0.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="700.09" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1893" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1903.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (41,500,000 samples, 0.16%)</title><rect x="1176.9" y="2005" width="1.8" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1179.89" y="2015.5" ></text>
</g>
<g >
<title>data (295,500,000 samples, 1.11%)</title><rect x="850.8" y="2053" width="13.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="853.76" y="2063.5" ></text>
</g>
<g >
<title>__stpncpy_sse2_unaligned (39,250,000 samples, 0.15%)</title><rect x="1147.3" y="2037" width="1.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1150.35" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (58,000,000 samples, 0.22%)</title><rect x="556.8" y="1957" width="2.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="559.81" y="1967.5" ></text>
</g>
<g >
<title>posix_cpu_clock_get (15,750,000 samples, 0.06%)</title><rect x="684.3" y="1941" width="0.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="687.30" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_advance (640,250,000 samples, 2.40%)</title><rect x="1156.4" y="2053" width="28.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1159.39" y="2063.5" >s..</text>
</g>
<g >
<title>value_match (21,500,000 samples, 0.08%)</title><rect x="560.4" y="2005" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="563.43" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1141" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (26,500,000 samples, 0.10%)</title><rect x="10.9" y="1237" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (35,750,000 samples, 0.13%)</title><rect x="10.9" y="2005" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (75,250,000 samples, 0.28%)</title><rect x="556.1" y="1973" width="3.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="559.05" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="933" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="943.5" ></text>
</g>
<g >
<title>main (10,684,500,000 samples, 39.98%)</title><rect x="92.7" y="2021" width="471.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="95.71" y="2031.5" >main</text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1077" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1087.5" ></text>
</g>
<g >
<title>exit_mmap (4,250,000 samples, 0.02%)</title><rect x="863.8" y="1957" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="866.81" y="1967.5" ></text>
</g>
<g >
<title>page_fault (3,250,000 samples, 0.01%)</title><rect x="679.9" y="2021" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="682.85" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="197" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="207.5" ></text>
</g>
<g >
<title>write_acc (15,750,000 samples, 0.06%)</title><rect x="864.4" y="2037" width="0.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="867.43" y="2047.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id@plt (10,000,000 samples, 0.04%)</title><rect x="1180.5" y="2005" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1183.53" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1301" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1311.5" ></text>
</g>
<g >
<title>free@plt (69,750,000 samples, 0.26%)</title><rect x="89.6" y="2021" width="3.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="92.63" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator= (4,000,000 samples, 0.01%)</title><rect x="15.0" y="2021" width="0.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="17.96" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1029" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1039.5" ></text>
</g>
<g >
<title>prep_new_page (4,000,000 samples, 0.01%)</title><rect x="759.1" y="1909" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="762.09" y="1919.5" ></text>
</g>
<g >
<title>__do_munmap (9,500,000 samples, 0.04%)</title><rect x="759.6" y="1989" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="762.63" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (26,000,000 samples, 0.10%)</title><rect x="10.9" y="757" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="767.5" ></text>
</g>
<g >
<title>__libc_malloc (2,500,000 samples, 0.01%)</title><rect x="554.1" y="1989" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="557.10" y="1999.5" ></text>
</g>
<g >
<title>__libc_malloc (734,750,000 samples, 2.75%)</title><rect x="18.4" y="2021" width="32.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="21.43" y="2031.5" >__..</text>
</g>
<g >
<title>[unknown] (25,750,000 samples, 0.10%)</title><rect x="10.9" y="69" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="79.5" ></text>
</g>
<g >
<title>__lock_text_start (2,500,000 samples, 0.01%)</title><rect x="18.3" y="1845" width="0.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="21.30" y="1855.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,250,000 samples, 0.02%)</title><rect x="863.8" y="2053" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="866.81" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (26,250,000 samples, 0.10%)</title><rect x="10.9" y="1045" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (26,750,000 samples, 0.10%)</title><rect x="10.9" y="1621" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.87" y="1631.5" ></text>
</g>
<g >
<title>__dynamic_cast@plt (5,250,000 samples, 0.02%)</title><rect x="708.3" y="2053" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="711.29" y="2063.5" ></text>
</g>
</g>
</svg>
